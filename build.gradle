import static aurorasdeco.Constants.*

plugins {
	id 'aurorasdeco.common'
	id 'com.modrinth.minotaur' version '2.+'
	id 'com.matthewprenger.cursegradle' version '1.4.+'
	id 'org.openjfx.javafxplugin' version '0.0.13'
}

group = project.maven_group
version = "${project.mod_version}+${getMCVersionString()}"
archivesBaseName = project.archives_base_name

if (!(System.getenv("CURSEFORGE_TOKEN") || System.getenv("MODRINTH_TOKEN"))) {
	version += "-local"
}
logger.lifecycle("Preparing version ${version}...")

boolean isMCVersionNonRelease() {
	return MINECRAFT_VERSION.matches('^\\d\\dw\\d\\d[a-z]$')
			|| MINECRAFT_VERSION.matches('\\d+\\.\\d+-(pre|rc)(\\d+)')
}

String getMCVersionString() {
	if (isMCVersionNonRelease()) {
		return MINECRAFT_VERSION
	}
	def version = MINECRAFT_VERSION.split('\\.')
	return version[0] + '.' + version[1]
}

String parseReadme() {
	def linkRegex = /!\[([A-z_ ]+)]\((images\/[A-z.\/_]+)\)/

	def readme = (String) file('README.md').text
	readme = readme.replaceAll(linkRegex, '![$1](https://lambdaurora.dev/AurorasDecorations/$2)')
	return readme
}

String fetchChangelog() {
	def changelogText = file('CHANGELOG.md').text
	def regexVersion = ((String) project.mod_version).replace('.', '\\.').replace('+', '\\+')
	def changelogRegex = ~"###? ${regexVersion}(?: - .+)?\\n\\n(( *- .+\\n)+)"
	def matcher = changelogText =~ changelogRegex

	if (matcher.find()) {
		String changelogContent = matcher.group(1)

		def changelogLines = changelogText.split('\n')
		def linkRefRegex = ~'^\\[([A-z\\d _\\-/+.]+)]: '
		for (int i = changelogLines.length - 1; i > 0; i--) {
			def line = changelogLines[i]
			if ((line =~ linkRefRegex).find())
				changelogContent += '\n' + line
			else break
		}

		return changelogContent
	} else {
		return null
	}
}

String getVersionType() {
	if (isMCVersionNonRelease() || version.contains("-alpha.")) {
		return "alpha"
	} else if (version.contains("-beta.")) {
		return "beta"
	} else {
		return "release"
	}
}

javafx {
	version = '17'
	modules = [ 'javafx.media', 'javafx.swing' ]
}

aurorasdeco {
	hasEmi = true
	hasTrinkets = true

	entrypoints {
		init {
			values = [
					entrypoint("dev.lambdaurora.aurorasdeco.AurorasDeco")
			]
		}
		client_init {
			values = [
					entrypoint("dev.lambdaurora.aurorasdeco.client.AurorasDecoClient"),
					entrypoint("dev.lambdaurora.aurorasdeco.hook.TrinketsHooks", hasTrinkets.get())
			]
		}
		emi {
			values = [
					entrypoint("dev.lambdaurora.aurorasdeco.hook.EmiHooks")
			]
			enabled.set(hasEmi.get())
		}
	}

	finalizeConfiguration()
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

modrinth {
	projectId = project.modrinth_id
	versionName = "Aurora's Decorations ${project.mod_version} (${getMCVersionString()})"
	gameVersions = [MINECRAFT_VERSION]
	loaders = ["quilt"]
	versionType = this.getVersionType()
	uploadFile = tasks.remapJar
	syncBodyFrom = parseReadme()

	dependencies {
		required.project "qsl"
		optional.project "trinkets"
		optional.project "emi"
	}

	// Changelog fetching
	def changelogContent = fetchChangelog()

	if (changelogContent) {
		changelog = changelogContent
	} else {
		afterEvaluate {
			tasks.modrinth.setEnabled(false)
		}
	}
}
tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

curseforge {
	if (System.getenv("CURSEFORGE_TOKEN")) {
		apiKey = System.getenv("CURSEFORGE_TOKEN")
	}

	project {
		id = project.curseforge_id
		releaseType = this.getVersionType()
		addGameVersion MINECRAFT_VERSION
		addGameVersion "Quilt"
		addGameVersion "Java 17"
		addGameVersion "Java 18"

		// Changelog fetching
		def changelogContent = fetchChangelog()

		if (changelogContent) {
			changelogType = "markdown"
			changelog = "Changelog:\n\n${changelogContent}"
		} else {
			afterEvaluate {
				uploadTask.setEnabled(false)
			}
		}

		mainArtifact(remapJar) {
			displayName = "Aurora's Decorations ${project.mod_version} (${getMCVersionString()})"

			relations {
				requiredDependency "qsl"
				optionalDependency "trinkets"
				optionalDependency "emi"
			}
		}

		afterEvaluate {
			uploadTask.setGroup("publishing")
			uploadTask.dependsOn("remapJar")
		}
	}
}
tasks.curseforge.setGroup("publishing")

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
